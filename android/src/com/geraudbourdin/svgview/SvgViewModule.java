/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.geraudbourdin.svgview;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.drawable.PictureDrawable;

import com.caverock.androidsvg.SVG;
import com.caverock.androidsvg.SVGParseException;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;

import java.io.IOException;
import java.io.InputStream;

@Kroll.module(name = "SvgView", id = "com.geraudbourdin.svgview")
public class SvgViewModule extends KrollModule {

  // Standard Debugging variables
  private static final String LCAT = "SvgViewModule";
  private static final boolean DBG = TiConfig.LOGD;

  // You can define constants with @Kroll.constant, for example:
  // @Kroll.constant public static final String EXTERNAL_NAME = value;

  public SvgViewModule() { super(); }

  @Kroll.onAppCreate
  public static void onAppCreate(TiApplication app) {
    // Log.d(LCAT, "inside onAppCreate");
    // put module init code that needs to run when the application is created
  }

  @Kroll.method
  public TiBlob toBlob(String image) {
    InputStream contentFile = null;
    SVG svgImage = null;

    if (image.charAt(0) == '<') {
      // Load string
      try {
        svgImage = SVG.getFromString(image);
      } catch (SVGParseException e) {
        Log.d(LCAT, "Failed to set svg from input stream.");
      }
    } else {
      // Load file
      String url = resolveUrl(null, image);
      TiBaseFile file =
              TiFileFactory.createTitaniumFile(new String[] {url}, false);
      try {
        contentFile = file.getInputStream();
      } catch (IOException e) {
        Log.d(LCAT, "Failed to get input stream.");
      }

      try {
        svgImage = SVG.getFromInputStream(contentFile);
      } catch (SVGParseException e) {
        Log.d(LCAT, "Failed to set svg from input stream.");
      }
    }

    if (svgImage != null && svgImage.getDocumentWidth() != -1) {
        Bitmap  newBM = Bitmap.createBitmap((int) Math.ceil(svgImage.getDocumentWidth()),
                (int) Math.ceil(svgImage.getDocumentHeight()),
                Bitmap.Config.ARGB_8888);
        Canvas bmcanvas = new Canvas(newBM);
        svgImage.renderToCanvas(bmcanvas);
        return TiBlob.blobFromImage(newBM);
    } else {
      return null;
    }
  }
}
